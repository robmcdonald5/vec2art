name: Simple E2E Tests

on:
  push:
    branches: [main, feature/*]
    paths:
      - "frontend/**"
      - "wasm/**"
      - "rebuild-wasm.sh"
      - ".github/workflows/e2e-simple.yml"
  pull_request:
    branches: [main]
    paths:
      - "frontend/**"
      - "wasm/**"
      - "rebuild-wasm.sh"
      - ".github/workflows/e2e-simple.yml"

env:
  NODE_VERSION: "20"

jobs:
  simple-e2e:
    name: Simple E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            wasm/vectorize-wasm/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('wasm/vectorize-wasm/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install wasm-pack
        run: |
          if ! command -v wasm-pack &> /dev/null; then
            curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
            echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          fi
          wasm-pack --version
        shell: bash

      - name: Build WASM module
        run: |
          echo "üîß Building WASM module for E2E tests..."
          export PATH="$HOME/.cargo/bin:$PATH"
          chmod +x ./rebuild-wasm.sh
          ./rebuild-wasm.sh
        shell: bash
        working-directory: .

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Setup environment variables
        run: |
          if [ -z "${{ secrets.PUBLIC_FORMSPARK_ENDPOINT_ID }}" ]; then
            echo "Using CI placeholder environment variables"
            cp .env.ci .env
          else
            echo "Using GitHub Secrets for environment variables"
            echo "PUBLIC_FORMSPARK_ENDPOINT_ID=${{ secrets.PUBLIC_FORMSPARK_ENDPOINT_ID }}" > .env
            echo "PUBLIC_TURNSTILE_SITE_KEY=${{ secrets.PUBLIC_TURNSTILE_SITE_KEY }}" >> .env
          fi

      - name: Install Playwright browsers
        run: npx playwright install chromium firefox --with-deps

      - name: Build application
        run: npm run build:ci
        env:
          NODE_ENV: production
        timeout-minutes: 5

      - name: Run simple E2E tests
        run: npm run test:simple
        env:
          CI: true

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: simple-e2e-results
          path: |
            frontend/playwright-report-simple/
            frontend/test-results/
          retention-days: 7

      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: simple-e2e-report
          path: frontend/playwright-report-simple/
          retention-days: 3

  summary:
    name: E2E Summary
    runs-on: ubuntu-latest
    needs: [simple-e2e]
    if: always()

    steps:
      - name: Check results
        run: |
          echo "Simple E2E Tests: ${{ needs.simple-e2e.result }}"

          if [[ "${{ needs.simple-e2e.result }}" != "success" ]]; then
            echo "‚ùå Simple E2E tests failed"
            exit 1
          fi

          echo "‚úÖ All simple E2E tests passed!"
