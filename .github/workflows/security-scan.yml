name: Security Scan

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Run security scan weekly on Sundays at 02:00 UTC
    - cron: "0 2 * * 0"

jobs:
  frontend-security:
    name: Frontend Security Scan
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Run npm audit
        run: |
          echo "üîç Running npm audit..."
          npm audit --audit-level=moderate --json > audit-results.json || true

          # Display results
          npm audit --audit-level=moderate || true

          # Check for high/critical vulnerabilities
          HIGH_VULNS=$(cat audit-results.json | jq -r '.metadata.vulnerabilities.high // 0')
          CRITICAL_VULNS=$(cat audit-results.json | jq -r '.metadata.vulnerabilities.critical // 0')

          echo "High vulnerabilities: $HIGH_VULNS"
          echo "Critical vulnerabilities: $CRITICAL_VULNS"

          # Fail if critical vulnerabilities found
          if [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "‚ùå Critical vulnerabilities found!"
            exit 1
          fi

          # Warn if high vulnerabilities found
          if [ "$HIGH_VULNS" -gt 0 ]; then
            echo "‚ö†Ô∏è High vulnerabilities found - consider updating dependencies"
          fi

      - name: Upload audit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-results
          path: frontend/audit-results.json
          retention-days: 30

  rust-security:
    name: Rust Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run cargo audit for core
        working-directory: vectorize-core
        run: |
          echo "üîç Scanning vectorize-core for security vulnerabilities..."
          cargo audit --json > ../core-audit-results.json || true
          cargo audit || true

      - name: Run cargo audit for CLI
        working-directory: vectorize-cli
        run: |
          echo "üîç Scanning vectorize-cli for security vulnerabilities..."
          cargo audit --json > ../cli-audit-results.json || true
          cargo audit || true

      - name: Run cargo audit for WASM
        working-directory: vectorize-wasm
        run: |
          echo "üîç Scanning vectorize-wasm for security vulnerabilities..."
          cargo audit --json > ../wasm-audit-results.json || true
          cargo audit || true

      - name: Upload Rust audit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: rust-audit-results
          path: |
            core-audit-results.json
            cli-audit-results.json
            wasm-audit-results.json
          retention-days: 30

  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      matrix:
        language: ["javascript-typescript"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Setup Node.js for CodeQL
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies for analysis
        working-directory: frontend
        run: npm ci --prefer-offline

      - name: Build for CodeQL analysis
        working-directory: frontend
        run: npm run build

      - name: Perform CodeQL analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [frontend-security, rust-security, codeql-analysis]
    if: always()

    steps:
      - name: Security scan summary
        run: |
          echo "## Security Scan Results"
          echo "Frontend Security: ${{ needs.frontend-security.result }}"
          echo "Rust Security: ${{ needs.rust-security.result }}"
          echo "CodeQL Analysis: ${{ needs.codeql-analysis.result }}"

          # Check if any security scans failed
          if [[ "${{ needs.frontend-security.result }}" == "failure" ]] || \
             [[ "${{ needs.rust-security.result }}" == "failure" ]] || \
             [[ "${{ needs.codeql-analysis.result }}" == "failure" ]]; then
            echo "‚ùå One or more security scans failed"
            exit 1
          fi

          echo "‚úÖ All security scans completed successfully"
