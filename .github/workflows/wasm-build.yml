name: WASM Build & Test

on:
  push:
    branches: [main]
    paths:
      - 'vectorize-core/**'
      - 'vectorize-wasm/**'
      - 'vectorize-cli/**'
      - '.github/workflows/wasm-build.yml'
  pull_request:
    branches: [main]
    paths:
      - 'vectorize-core/**'
      - 'vectorize-wasm/**'
      - 'vectorize-cli/**'
      - '.github/workflows/wasm-build.yml'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  rust-checks:
    name: Rust Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          override: true
      
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Check Rust formatting
        run: |
          echo "üîç Checking Rust code formatting..."
          cargo fmt --all -- --check
      
      - name: Run Clippy lints (Core)
        working-directory: vectorize-core
        run: |
          echo "üîç Running Clippy on vectorize-core..."
          cargo clippy --all-targets --all-features -- -D warnings
      
      - name: Run Clippy lints (CLI)
        working-directory: vectorize-cli
        run: |
          echo "üîç Running Clippy on vectorize-cli..."
          cargo clippy --all-targets --all-features -- -D warnings
      
      - name: Run Clippy lints (WASM)
        working-directory: vectorize-wasm
        run: |
          echo "üîç Running Clippy on vectorize-wasm..."
          cargo clippy --all-targets --all-features -- -D warnings

  rust-tests:
    name: Rust Tests
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-test-
            ${{ runner.os }}-cargo-
      
      - name: Run tests (Core)
        working-directory: vectorize-core
        run: |
          echo "üß™ Running tests for vectorize-core..."
          cargo test --verbose --all-features
      
      - name: Run tests (CLI)
        working-directory: vectorize-cli
        run: |
          echo "üß™ Running tests for vectorize-cli..."
          cargo test --verbose --all-features
      
      - name: Run benchmark tests (Core)
        if: matrix.os == 'ubuntu-latest'
        working-directory: vectorize-core
        run: |
          echo "‚ö° Running benchmark tests..."
          cargo test --benches --verbose || echo "No benchmarks found"

  wasm-build:
    name: WASM Build & Test
    runs-on: ubuntu-latest
    needs: [rust-checks]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Rust toolchain with wasm target
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
          override: true
      
      - name: Install wasm-pack
        run: |
          curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
          wasm-pack --version
      
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            vectorize-wasm/pkg/
          key: ${{ runner.os }}-wasm-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-wasm-
            ${{ runner.os }}-cargo-
      
      - name: Build WASM package
        working-directory: vectorize-wasm
        run: |
          echo "ü¶Ä Building WASM package..."
          wasm-pack build --target web --out-dir pkg --dev
          
          echo "üì¶ WASM package contents:"
          ls -la pkg/
          
          echo "üìä WASM file size:"
          du -h pkg/*.wasm
      
      - name: Test WASM package
        working-directory: vectorize-wasm
        run: |
          echo "üß™ Testing WASM package..."
          wasm-pack test --headless --firefox
      
      - name: Build optimized WASM (production)
        working-directory: vectorize-wasm
        run: |
          echo "üöÄ Building optimized WASM package..."
          wasm-pack build --target web --out-dir pkg-opt --release
          
          echo "üìä Optimized WASM file size:"
          du -h pkg-opt/*.wasm
          
          echo "üìà Size comparison:"
          echo "Debug build: $(du -h pkg/*.wasm | cut -f1)"
          echo "Release build: $(du -h pkg-opt/*.wasm | cut -f1)"
      
      - name: Upload WASM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wasm-packages
          path: |
            vectorize-wasm/pkg/
            vectorize-wasm/pkg-opt/
          retention-days: 7

  cli-build:
    name: CLI Build & Test
    runs-on: ${{ matrix.os }}
    needs: [rust-checks]
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cli-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cli-
            ${{ runner.os }}-cargo-
      
      - name: Build CLI (debug)
        working-directory: vectorize-cli
        run: |
          echo "üî® Building CLI (debug)..."
          cargo build --verbose
      
      - name: Build CLI (release)
        working-directory: vectorize-cli
        run: |
          echo "üöÄ Building CLI (release)..."
          cargo build --release --verbose
      
      - name: Test CLI functionality
        working-directory: vectorize-cli
        run: |
          echo "üß™ Testing CLI functionality..."
          cargo run -- --help
          echo "‚úÖ CLI help command works"
      
      - name: Upload CLI binaries
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: cli-binaries-${{ matrix.os }}
          path: |
            vectorize-cli/target/release/vectorize-cli*
          retention-days: 7

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [wasm-build, cli-build]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      
      - name: Download WASM artifacts
        uses: actions/download-artifact@v4
        with:
          name: wasm-packages
          path: vectorize-wasm/
      
      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci --prefer-offline
      
      - name: Test WASM integration
        working-directory: frontend
        run: |
          echo "üîó Testing WASM integration..."
          npm run build
          echo "‚úÖ Frontend builds successfully with WASM"

  rust-summary:
    name: Rust/WASM Summary
    runs-on: ubuntu-latest
    needs: [rust-checks, rust-tests, wasm-build, cli-build, integration-test]
    if: always()
    
    steps:
      - name: Check all results
        run: |
          echo "## Rust/WASM Build Results"
          echo "Rust Checks: ${{ needs.rust-checks.result }}"
          echo "Rust Tests: ${{ needs.rust-tests.result }}"
          echo "WASM Build: ${{ needs.wasm-build.result }}"
          echo "CLI Build: ${{ needs.cli-build.result }}"
          echo "Integration Test: ${{ needs.integration-test.result }}"
          
          # Check if any jobs failed
          if [[ "${{ needs.rust-checks.result }}" == "failure" ]] || \
             [[ "${{ needs.rust-tests.result }}" == "failure" ]] || \
             [[ "${{ needs.wasm-build.result }}" == "failure" ]] || \
             [[ "${{ needs.cli-build.result }}" == "failure" ]] || \
             [[ "${{ needs.integration-test.result }}" == "failure" ]]; then
            echo "‚ùå One or more Rust/WASM jobs failed"
            exit 1
          fi
          
          echo "‚úÖ All Rust/WASM jobs completed successfully"