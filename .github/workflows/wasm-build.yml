name: WASM Build & Test

on:
  push:
    branches: [main, feature/*]
    paths:
      - "wasm/**"
      - "rebuild-wasm.sh"
      - ".github/workflows/wasm-build.yml"
  pull_request:
    branches: [main]
    paths:
      - "wasm/**"
      - "rebuild-wasm.sh"
      - ".github/workflows/wasm-build.yml"

env:
  CARGO_TERM_COLOR: always

jobs:
  wasm-build:
    name: WASM Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            wasm/vectorize-wasm/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('wasm/vectorize-wasm/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install wasm-pack
        run: |
          if ! command -v wasm-pack &> /dev/null; then
            if [[ "${{ runner.os }}" == "Windows" ]]; then
              # Windows installation
              curl -L --output wasm-pack-init.exe https://github.com/rustwasm/wasm-pack/releases/latest/download/wasm-pack-init.exe
              ./wasm-pack-init.exe -y
              echo "$HOME/.cargo/bin" >> $GITHUB_PATH
            else
              # Linux/macOS installation  
              curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
              echo "$HOME/.cargo/bin" >> $GITHUB_PATH
            fi
          fi

          # Ensure wasm-pack is in PATH
          export PATH="$HOME/.cargo/bin:$PATH"
          wasm-pack --version
        shell: bash

      - name: Run Rust tests
        run: |
          echo "üß™ Running Rust unit tests..."
          cd wasm/vectorize-wasm
          cargo test --verbose
        shell: bash

      - name: Build WASM module
        run: |
          echo "üîß Building WASM module..."
          export PATH="$HOME/.cargo/bin:$PATH"

          # Make script executable
          chmod +x ./rebuild-wasm.sh 2>/dev/null || true

          # Run the rebuild script
          bash ./rebuild-wasm.sh
        shell: bash

      - name: Verify WASM build output
        run: |
          echo "üîç Verifying WASM build output..."

          # Check that all required files exist
          files=(
            "frontend/src/lib/wasm/vectorize_wasm.js"
            "frontend/src/lib/wasm/vectorize_wasm.d.ts"
            "frontend/src/lib/wasm/vectorize_wasm_bg.wasm"
            "frontend/src/lib/wasm/vectorize_wasm_bg.wasm.d.ts"
            "frontend/static/wasm/vectorize_wasm.js"
            "frontend/static/wasm/vectorize_wasm.d.ts"
            "frontend/static/wasm/vectorize_wasm_bg.wasm"
            "frontend/static/wasm/vectorize_wasm_bg.wasm.d.ts"
          )

          for file in "${files[@]}"; do
            if [ -f "$file" ]; then
              echo "‚úÖ $file exists ($(du -h "$file" | cut -f1))"
            else
              echo "‚ùå $file missing"
              exit 1
            fi
          done

          # Check that import fixes were applied
          if grep -q "from './__wbindgen_placeholder__.js'" frontend/src/lib/wasm/vectorize_wasm.js; then
            echo "‚úÖ Import path fixes applied"
          else
            echo "‚ùå Import path fixes not applied"
            exit 1
          fi

          echo "üéâ WASM build verification completed successfully!"
        shell: bash

      - name: Upload WASM artifacts
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: wasm-build-output
          path: |
            frontend/src/lib/wasm/
            frontend/static/wasm/
          retention-days: 7

      - name: Test WASM file sizes
        run: |
          echo "üìä WASM file size analysis:"
          wasm_file="frontend/src/lib/wasm/vectorize_wasm_bg.wasm"
          if [ -f "$wasm_file" ]; then
            size=$(du -h "$wasm_file" | cut -f1)
            echo "WASM binary size: $size"
            
            # Warn if WASM is unexpectedly large (>5MB)
            size_bytes=$(stat -c%s "$wasm_file" 2>/dev/null || stat -f%z "$wasm_file" 2>/dev/null || echo "0")
            if [ "$size_bytes" -gt 5242880 ]; then
              echo "‚ö†Ô∏è  WASM file is quite large ($size). Consider optimization."
            else
              echo "‚úÖ WASM file size is reasonable ($size)"
            fi
          fi
        shell: bash

  wasm-integration-test:
    name: WASM Integration Test
    runs-on: ubuntu-latest
    needs: wasm-build

    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Download WASM artifacts
        uses: actions/download-artifact@v4
        with:
          name: wasm-build-output
          path: frontend/

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Test WASM integration
        run: |
          echo "üß™ Testing WASM integration with frontend..."

          # Run SvelteKit sync to ensure types are current
          npx svelte-kit sync

          # Run TypeScript check to ensure WASM bindings work
          npx svelte-check --tsconfig ./tsconfig.json

          # Try to build the frontend with WASM
          npm run build

          echo "‚úÖ WASM integration test completed successfully!"
        env:
          NODE_ENV: production

  summary:
    name: WASM Build Summary
    runs-on: ubuntu-latest
    needs: [wasm-build, wasm-integration-test]
    if: always()

    steps:
      - name: Check results
        run: |
          echo "WASM Build: ${{ needs.wasm-build.result }}"
          echo "Integration Test: ${{ needs.wasm-integration-test.result }}"

          if [[ "${{ needs.wasm-build.result }}" != "success" ]]; then
            echo "‚ùå WASM build failed"
            exit 1
          fi

          if [[ "${{ needs.wasm-integration-test.result }}" != "success" ]]; then
            echo "‚ùå WASM integration test failed"
            exit 1
          fi

          echo "‚úÖ All WASM build and integration tests passed!"
