name: Deploy Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_OPTIONS: "--max-old-space-size=4096"

jobs:
  # Pre-deployment validation
  validate:
    name: Validate & Build
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check-deploy.outputs.should-deploy }}
      deploy-env: ${{ steps.check-deploy.outputs.deploy-env }}
    
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            wasm/vectorize-wasm/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('wasm/vectorize-wasm/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install wasm-pack
        run: |
          if ! command -v wasm-pack &> /dev/null; then
            curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
            echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          fi
          export PATH="$HOME/.cargo/bin:$PATH"
          wasm-pack --version
        shell: bash

      - name: Build WASM module
        run: |
          echo "üîß Building WASM module..."
          export PATH="$HOME/.cargo/bin:$PATH"
          chmod +x ./scripts/rebuild-wasm.sh 2>/dev/null || true
          bash ./scripts/rebuild-wasm.sh
        shell: bash
        working-directory: .

      - name: Install frontend dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Setup environment variables
        run: |
          if [ -z "${{ secrets.PUBLIC_FORMSPARK_ENDPOINT_ID }}" ]; then
            echo "Using CI placeholder environment variables"
            cp .env.ci .env
          else
            echo "Using GitHub Secrets for environment variables"
            echo "PUBLIC_FORMSPARK_ENDPOINT_ID=${{ secrets.PUBLIC_FORMSPARK_ENDPOINT_ID }}" > .env
            echo "PUBLIC_TURNSTILE_SITE_KEY=${{ secrets.PUBLIC_TURNSTILE_SITE_KEY }}" >> .env
          fi

      - name: Code quality checks
        run: |
          echo "üîç Running code quality checks..."

          # Auto-format code if needed
          if ! npx prettier --check . --ignore-unknown; then
            echo "Auto-formatting code..."
            npx prettier --write . --ignore-unknown
          fi

          # SvelteKit sync
          npx svelte-kit sync

          # Type checking
          npx svelte-check --tsconfig ./tsconfig.json --fail-on-warnings

          # Linting
          npx eslint . --max-warnings=0

      - name: Clean build cache
        run: |
          echo "üßπ Cleaning build cache to prevent symlink issues..."
          rm -rf .svelte-kit

          # Clean Vercel output completely to prevent config issues
          if [ -d ".vercel" ]; then
            rm -rf .vercel
          fi

          # Enable git symlinks for consistency
          git config core.symlinks true

      - name: Run tests
        run: |
          echo "üß™ Running test suite..."
          
          # Run unit tests with coverage
          npx vitest run --coverage --reporter=verbose
          
          echo "‚úÖ All tests passed"
        env:
          CI: true

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Verify build output
        run: |
          echo "üîç Verifying build output..."

          # Check for SvelteKit output directories
          if [ -d ".svelte-kit/output" ]; then
            echo "‚úÖ SvelteKit output directory created successfully"
            echo "üìä SvelteKit output size: $(du -sh .svelte-kit/output/ | cut -f1)"

            # Check for client output
            if [ -d ".svelte-kit/output/client" ]; then
              echo "‚úÖ Client output found"
              client_files=$(find .svelte-kit/output/client -name "*.js" | wc -l)
              echo "üì¶ Client JS files: $client_files"
            else
              echo "‚ùå Client output missing"
              exit 1
            fi

            # Check for server output
            if [ -d ".svelte-kit/output/server" ]; then
              echo "‚úÖ Server output found"
            else
              echo "‚ùå Server output missing"
              exit 1
            fi

          else
            echo "‚ùå SvelteKit output directory not found"
            exit 1
          fi

          # Check for Vercel output directories
          if [ -d ".vercel/output" ]; then
            echo "‚úÖ Vercel output directory created successfully"
            echo "üìä Vercel output size: $(du -sh .vercel/output/ | cut -f1)"

            # Check for Vercel static files
            if [ -d ".vercel/output/static" ]; then
              echo "‚úÖ Vercel static output found"
            fi

            # Check for Vercel functions
            if [ -d ".vercel/output/functions" ]; then
              echo "‚úÖ Vercel functions output found"
            fi

          else
            echo "‚ö†Ô∏è  Vercel output directory not found (may be normal for some adapters)"
          fi

          # Check for WASM files in any output directory
          wasm_files=$(find .svelte-kit .vercel -name "*.wasm" 2>/dev/null | wc -l)
          echo "ü¶Ä WASM files in output: $wasm_files"

          if [ $wasm_files -eq 0 ]; then
            echo "‚ö†Ô∏è  No WASM files found in build output"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            .svelte-kit/output/
            .vercel/output/
            !**/*.map
          retention-days: 7

      - name: Determine deployment
        id: check-deploy
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "deploy-env=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "deploy-env=development" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "deploy-env=none" >> $GITHUB_OUTPUT
          fi

  # Deploy to appropriate environment
  deploy:
    name: Deploy to ${{ needs.validate.outputs.deploy-env }}
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should-deploy == 'true'
    environment:
      name: ${{ needs.validate.outputs.deploy-env }}
      url: ${{ steps.deploy.outputs.url }}

    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: .

      - name: Debug artifacts
        run: |
          echo "üîç Debugging artifact download..."
          echo "Current directory contents:"
          ls -la ./
          echo "Searching for .svelte-kit directories..."
          find . -name ".svelte-kit" -type d 2>/dev/null || echo "No .svelte-kit directories found"
          echo "Searching for any build outputs..."
          find . -name "output" -type d 2>/dev/null || echo "No output directories found"

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Deploy to Vercel
        id: deploy
        run: |
          echo "üöÄ Deploying to ${{ needs.validate.outputs.deploy-env }}..."

          # Verify build artifacts exist (should be in current directory now)
          if [ ! -d ".svelte-kit/output" ]; then
            echo "‚ùå Build artifacts not found"
            echo "Current directory contents:"
            ls -la ./
            echo "Expected .svelte-kit/output directory not found"
            exit 1
          fi

          echo "‚úÖ Build artifacts verified"
          echo "üìä Artifact size: $(du -sh .svelte-kit/output/ | cut -f1)"

          # Deploy prebuilt artifacts (project linked automatically)
          if [[ "${{ needs.validate.outputs.deploy-env }}" == "production" ]]; then
            echo "üì¶ Deploying production build..."
            DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }} --yes)
          else
            echo "üì¶ Deploying development build..."
            DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} --yes)
          fi

          echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "‚úÖ Deployment successful: $DEPLOYMENT_URL"

  # Post-deployment verification
  verify:
    name: Post-Deploy Verification
    runs-on: ubuntu-latest
    needs: [validate, deploy]
    if: needs.validate.outputs.should-deploy == 'true' && needs.validate.outputs.deploy-env == 'production'
    continue-on-error: true

    steps:
      - name: Smoke tests
        run: |
          echo "üîç Running smoke tests..."
          
          # Check site availability
          if curl -f https://vec2art.vercel.app; then
            echo "‚úÖ Site is accessible"
          else
            echo "‚ùå Site accessibility check failed"
            exit 1
          fi
          
          # Check security headers
          if curl -I https://vec2art.vercel.app | grep -E "X-Frame|X-Content-Type"; then
            echo "‚úÖ Security headers present"
          else
            echo "‚ö†Ô∏è  Some security headers missing"
          fi
          
          echo "‚úÖ Smoke tests completed"