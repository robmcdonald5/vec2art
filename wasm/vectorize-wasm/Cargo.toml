[package]
name = "vectorize-wasm"
version = "0.1.0"
edition = "2021"
description = "WebAssembly wrapper for vectorize-core"
license = "MIT OR Apache-2.0"
repository = "https://github.com/your-org/vec2art"

[package.metadata.wasm-pack]
wasm-opt = false

[lib]
crate-type = ["cdylib"]

[dependencies]
# Core vectorization library with conditional parallel features
vectorize-core = { path = "../vectorize-core", default-features = false }

# Note: Rayon/threading dependencies removed - using single-threaded WASM + Web Worker architecture

# GPU acceleration support with enhanced WebGPU/WebGL2 capabilities
wgpu = { version = "26.0", features = ["webgpu", "webgl"], optional = true }
bytemuck = { version = "1.14", features = ["derive"], optional = true }
pollster = { version = "0.3", optional = true }
futures-channel = { version = "0.3", optional = true }
futures-util = { version = "0.3", optional = true }

# Image processing (needed for ImageBuffer)
image = { workspace = true }

# WebAssembly bindings
wasm-bindgen = { workspace = true, features = ["serde-serialize"] }
wasm-bindgen-futures = { workspace = true }
js-sys = { workspace = true }
web-sys = { workspace = true, features = [
  "console",
  "ImageData",
  "Navigator",
  "Performance",
  "PerformanceEntry",
  "PerformanceMark",
  "PerformanceMeasure",
  "Window",
  "Worker",
  "WorkerGlobalScope",
  "WorkerOptions",
  "WorkerType",
] }

# Error handling and panic hooks
console_error_panic_hook = { workspace = true }
wee_alloc = { workspace = true }

# Serialization
serde = { workspace = true }
serde_json = { workspace = true }
serde-wasm-bindgen = { workspace = true }

# TypeScript generation
ts-rs = { version = "9.0", features = ["serde-compat"], optional = true }

# Logging
log = { workspace = true }
console_log = "0.2"

[dev-dependencies]
wasm-bindgen-test = { workspace = true }

# Benchmarking dependencies (only for native targets, not WASM)
[target.'cfg(not(target_arch = "wasm32"))'.dev-dependencies]
criterion = { version = "0.5", features = ["html_reports"] }
rand = { version = "0.8", features = ["std_rng"] }

[features]
# Default features for single-threaded WASM + Web Worker architecture
default = ["console_error_panic_hook", "wee_alloc", "enhanced-error-handling", "gpu-acceleration", "single-threaded", "wasm-base", "console_log"]
console_error_panic_hook = []
wee_alloc = []
console_log = []
# Base WASM support (always enabled)
wasm-base = ["vectorize-core/wasm"]
# Single-threaded mode - our primary architecture for stability
single-threaded = ["vectorize-core/single-threaded"]
# Enhanced error handling and graceful fallback
enhanced-error-handling = []
# GPU acceleration via WebGPU with comprehensive backend support
gpu-acceleration = ["wgpu", "bytemuck", "pollster", "futures-channel", "futures-util", "vectorize-core/gpu-acceleration"]
# Separate GPU backends for better control and fallback
webgpu-backend = ["gpu-acceleration"]
webgl-backend = ["gpu-acceleration"]
# TypeScript generation feature
generate-ts = ["ts-rs", "vectorize-core/generate-ts"]

# Disable wasm-opt optimizations to avoid dependency issues
[package.metadata.wasm-pack.profile.release]
wasm-opt = false

# Also disable for test profile to fix type generation
[package.metadata.wasm-pack.profile.dev]
wasm-opt = false