[build]
# Enable unstable features for better optimization
rustflags = [
    "-C", "target-cpu=native",  # Optimize for the current CPU when building natively
]

# Required for wasm-bindgen-rayon threading support
[unstable]
build-std = ["panic_abort", "std"]

# Multi-threaded WASM configuration with atomics support
[target.wasm32-unknown-unknown]
rustflags = [
    "-C", "opt-level=3",
    "-C", "codegen-units=1",   # Single codegen unit for better optimization
    "--cfg", "web_sys_unstable_apis",  # Enable unstable web APIs
    "-C", "target-feature=+atomics,+bulk-memory,+mutable-globals,+simd128",  # Full multi-threading support
    "-C", "link-arg=--max-memory=4294967296",
    "-C", "link-arg=--import-memory",
    "-C", "link-arg=--export-memory", 
    "-C", "link-arg=--shared-memory",
]

# Use wasm-opt for further optimization
runner = "wasm-opt -Os --enable-simd --enable-bulk-memory --enable-threads"

[env]
# Multi-threaded builds need atomics
RUSTFLAGS_wasm32_unknown_unknown = "-C target-feature=+atomics,+bulk-memory,+mutable-globals,+simd128"

[alias]
# Convenient aliases for development
wasm-build = "build --target wasm32-unknown-unknown --release"
wasm-build-mt = "build --target wasm32-unknown-unknown --release --features wasm-parallel"
wasm-test = "test --target wasm32-unknown-unknown"
wasm-test-mt = "test --target wasm32-unknown-unknown --features wasm-parallel"
bench-native = "bench --workspace --exclude vectorize-wasm"

# Profile for multi-threaded WASM builds
[profile.release-mt]
inherits = "release"
debug = false
lto = true
codegen-units = 1
panic = "abort"